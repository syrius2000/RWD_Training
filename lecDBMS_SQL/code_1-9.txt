
/* テーブル同士のコンペア　集合の相等性チェック */
/* 5. 重複行を削除する高速なクエリ
/* 3. 差集合で関係除算を表現する */
/* PostgreSQLでは「with oids」をCREATE TABLE文の最後に追加すること */

/* テーブル同士のコンペア：基本編*/
SELECT COUNT(*) AS row_cnt
  FROM ( SELECT *
           FROM   tbl_A
         UNION
         SELECT *
           FROM   tbl_B ) TMP;

/* テーブル同士のコンペア：応用編（Oracleでは通らない） */
SELECT CASE WHEN COUNT(*) = 0
            THEN '等しい'
            ELSE '異なる' END AS result
  FROM ((SELECT * FROM  tbl_A
         UNION
         SELECT * FROM  tbl_B)
         EXCEPT
        (SELECT * FROM  tbl_A
         INTERSECT
         SELECT * FROM  tbl_B)) TMP;

/* テーブルに対するdiff：排他的和集合を求める */
(SELECT * FROM  tbl_A
   EXCEPT
 SELECT * FROM  tbl_B)
 UNION ALL
(SELECT * FROM  tbl_B
   EXCEPT
 SELECT * FROM  tbl_A);

/* 差集合で関係除算（剰余を持った除算） */
SELECT DISTINCT emp
  FROM EmpSkills ES1
 WHERE NOT EXISTS
        (SELECT skill
           FROM Skills
         EXCEPT
         SELECT skill
           FROM EmpSkills ES2
          WHERE ES1.emp = ES2.emp);

/* 等しい部分集合を見つける(p.134) */
SELECT SP1.sup, SP2.sup
  FROM SupParts SP1, SupParts SP2
 WHERE SP1.sup < SP2.sup              /* 業者の組み合わせを作る */
   AND SP1.part = SP2.part            /* 条件１．同じ種類の部品を扱う */
GROUP BY SP1.sup, SP2.sup
HAVING COUNT(*) = (SELECT COUNT(*)    /* 条件２．同数の部品を扱う */
                     FROM SupParts SP3
                    WHERE SP3.sup = SP1.sup)
   AND COUNT(*) = (SELECT COUNT(*)
                     FROM SupParts SP4
                    WHERE SP4.sup = SP2.sup);

/* 重複行を削除する高速なクエリ１：補集合をEXCEPTで求める */
DELETE FROM Products
 WHERE rowid IN ( SELECT rowid
                    FROM Products
                  EXCEPT
                  SELECT MAX(rowid)
                    FROM Products
                   GROUP BY name, price);

/* 重複行を削除する高速なクエリ２：補集合をNOT IN で求める */
DELETE FROM Products
 WHERE rowid NOT IN ( SELECT MAX(rowid)
                        FROM Products
                       GROUP BY name, price);
