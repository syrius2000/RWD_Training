/* データの歯抜けを探す */


-- 結果が返れば歯抜けあり
SELECT '歯抜けあり ' AS gap
  FROM SeqTbl
HAVING COUNT(*) <> MAX(seq);

-- 空のGROUP BY句
SELECT '歯抜けあり ' AS gap
  FROM SeqTbl
GROUP BY ()
HAVING COUNT(*) <> MAX(seq);

-- 歯抜けの最小値を探す
SELECT MIN(seq + 1) AS gap
  FROM SeqTbl
 WHERE (seq+ 1) NOT IN (SELECT seq FROM SeqTbl);


-- 欠番を探せ：発展版

SELECT '歯抜けあり ' AS gap
  FROM SeqTbl
HAVING COUNT(*) <> MAX(seq) - MIN(seq) + 1;


-- 欠番があってもなくても一行返す
SELECT CASE WHEN COUNT(*) = 0 THEN 'テーブルが空です '
            WHEN COUNT(*) <> MAX(seq) -MIN(seq) + 1 THEN '歯抜けあり '
            ELSE '連続 ' END AS gap
  FROM SeqTbl;


-- 歯抜けの最小値を探す：テーブルに 1がない場合は、 1を返す
SELECT  CASE  WHEN  COUNT(*) = 0 OR MIN(seq)  >  1  -- 下限が 1でない場合 → 1を返す
              THEN  1
              ELSE  (SELECT MIN(seq +1)  -- 下限が 1の場合 →最小の欠番を返す
                       FROM SeqTbl S1
                      WHERE NOT EXISTS
                            (SELECT *
                               FROM SeqTbl S2
                              WHERE S2.seq = S1.seq + 1)) END
  FROM SeqTbl;



-- 最頻値を求める SQL　その 1：ALL述語の利用
SELECT income, COUNT(*) AS cnt
  FROM Graduates
 GROUP BY income
HAVING COUNT(*) >= ALL ( SELECT COUNT(*)
                           FROM Graduates
                          GROUP BY income);


-- 最頻値を求める SQL　その 2：極値関数の利用
SELECT income, COUNT(*) AS cnt
  FROM Graduates
 GROUP BY income
HAVING COUNT(*) >= ( SELECT MAX(cnt)
                       FROM ( SELECT COUNT(*) AS cnt
                                FROM Graduates
                               GROUP BY income) TMP ) ;



----


SELECT COUNT(*), COUNT(col_1)
  FROM NullTbl;



/* NULL を含まない集合を探す */

-- 提出日に NULLを含まない学部を選択する　その１： COUNT関数の利用
SELECT dpt
  FROM Students
 GROUP BY dpt
HAVING COUNT(*) = COUNT(sbmt_date);

-- 提出日に NULLを含まない学部を選択する　その２： CASE式の利用
SELECT dpt
  FROM Students
 GROUP BY dpt
HAVING COUNT(*) = SUM(CASE WHEN sbmt_date IS NOT NULL
                           THEN 1 ELSE 0 END);


-- 集合にきめ細かな条件を設定する

SELECT class
  FROM TestResults
 GROUP BY class
HAVING COUNT(*) * 0.75
        <= SUM(CASE WHEN score >= 80
                    THEN 1
                    ELSE 0 END) ;



SELECT class
  FROM TestResults
 GROUP BY class
HAVING SUM(CASE WHEN score >= 50 AND sex = '男'
                THEN 1
                ELSE 0 END)
         > SUM(CASE WHEN score >= 50 AND sex = '女'
                    THEN 1
                    ELSE 0 END) ;

-- 男子と女子の平均点を比較するクエリその 1：空集合に対する平均を0で返す
SELECT class
  FROM TestResults
 GROUP BY class
HAVING AVG(CASE WHEN sex = '男' THEN score ELSE 0 END)
         < AVG(CASE WHEN sex = '女' THEN score ELSE 0 END) ;


-- 男子と女子の平均点を比較するクエリその 2：空集合に対する平均を NULLで返す
SELECT class
  FROM TestResults
 GROUP BY class
HAVING AVG(CASE WHEN sex = '男' THEN score ELSE NULL END)
        < AVG(CASE WHEN sex = '女' THEN score ELSE NULL END) ;




-- 全称文を述語で表現する
SELECT team_id, member
  FROM Teams T1
 WHERE NOT EXISTS (SELECT *
                     FROM Teams T2
                    WHERE T1.team_id = T2.team_id
                      AND status <> '待機 ' );

/* 全称文を集合で表現する：その1 */
SELECT team_id
  FROM Teams
 GROUP BY team_id
HAVING COUNT(*) = SUM(CASE WHEN status = '待機'
                           THEN 1
                           ELSE 0 END);

-- 全称文を集合で表現する：その 2
SELECT team_id
  FROM Teams
 GROUP BY team_id
HAVING MAX(status) = '待機 '
   AND MIN(status) = '待機 ';

-- 総員スタンバイかどうかをチームごとに一覧表示
SELECT team_id,
       CASE WHEN MAX(status) = '待機 ' AND MIN(status) = '待機 '
            THEN '総員スタンバイ '
            ELSE '隊長！メンバーが足りません ' END AS status
  FROM Teams GROUP BY team_id;


-- 一意集合と多重集合

-- 資材のダブっている拠点を選択する
SELECT center
  FROM Materials
 GROUP BY center
HAVING COUNT(material) <> COUNT(DISTINCT material);


SELECT center, CASE WHEN COUNT(material) <> COUNT(DISTINCT material)
                    THEN 'ダブり有り'
                    ELSE 'ダブり無し'
                END AS status
  FROM Materials
 GROUP BY center;


-- ダブりのある集合：EXISTSの利用
SELECT center, material
  FROM Materials M1
 WHERE EXISTS (SELECT *
                 FROM Materials M2
                WHERE M1.center = M2.center
                  AND M1.receive_date <> M2.receive_date
                  AND M1.material = M2.material);




-- /* 関係除算でバスケット解析 */
-- ビールと紙オムツと自転車をすべて置いている店舗を検索する：間違った SQL
SELECT DISTINCT shop
  FROM ShopItems
 WHERE item IN (SELECT item FROM Items);



-- ビールと紙オムツと自転車をすべて置いている店舗を検索する：正しい SQL
SELECT SI.shop
  FROM ShopItems SI INNER JOIN Items I
    ON SI.item = I.item
 GROUP BY SI.shop
HAVING COUNT(SI.item) = (SELECT COUNT(item) FROM Items);


-- COUNT(I.item)はもはや 3とは限らない
SELECT SI.shop, COUNT(SI.item), COUNT(I.item)
  FROM ShopItems SI INNER JOIN Items I
    ON SI.item = I.item
 GROUP BY SI.shop;


-- 厳密な関係除算：外部結合と COUNT関数の利用
SELECT SI.shop
  FROM ShopItems SI LEFT OUTER JOIN Items I
    ON SI.item=I.item
 GROUP BY SI.shop
HAVING COUNT(SI.item) = (SELECT COUNT(item) FROM Items)  -- 条件 1
   AND COUNT(I.item)  = (SELECT COUNT(item) FROM Items); -- 条件 2
